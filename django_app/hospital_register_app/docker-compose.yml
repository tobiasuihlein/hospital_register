services:
  web:
    build: .
    #command: python manage.py runserver 0.0.0.0:8000
    #command: sh -c "python wait_for_db.py && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    command: sh -c "python wait_for_db.py && python manage.py migrate --database=default && python manage.py migrate --database=hospital_register_db && gunicorn --bind 0.0.0.0:8000 hospital_register_app.wsgi:application"
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mynetwork
  

  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PW}
      MYSQL_DATABASE: ${DB_NAME}
    expose:
      - "3306"
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/01-init.sql  # Script to initialize databases
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5


  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/staticfiles
    depends_on:
      - web
    networks:
      - mynetwork

volumes:
  mysql_data:
  static_volume:

networks:
  mynetwork:
    driver: bridge
